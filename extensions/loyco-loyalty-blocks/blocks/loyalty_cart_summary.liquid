{% comment %}
  Loyalty Cart Summary Block
  Shows points that will be earned from cart items and potential rewards
{% endcomment %}

<div class="loyco-cart-summary"
     data-shop="{{ shop.permanent_domain }}"
     {% if customer %}data-customer-id="{{ customer.id }}"{% endif %}>

  <!-- Guest State -->
  {% unless customer %}
    <div class="loyco-cart-guest">
      <div class="loyco-guest-card">
        <div class="loyco-guest-icon">🎁</div>
        <div class="loyco-guest-content">
          <h4>Earn Points on This Order</h4>
          <p>Join our loyalty program to start earning points on every purchase!</p>
          <a href="/account/register" class="loyco-guest-cta">Join Now & Earn Points</a>
        </div>
      </div>
    </div>
  {% endunless %}

  <!-- Customer State -->
  {% if customer %}
    <div class="loyco-cart-customer">
      <div class="loyco-cart-loading">
        <div class="loyco-spinner"></div>
        <span>Calculating your rewards...</span>
      </div>

      <div class="loyco-cart-content" style="display: none;">
        <div class="loyco-cart-header">
          <h4>🎁 Loyalty Rewards</h4>
        </div>

        <div class="loyco-cart-earnings">
          <div class="loyco-earnings-row">
            <span class="loyco-earnings-label">Points you'll earn:</span>
            <span class="loyco-earnings-value">
              <strong class="loyco-base-points" data-base-points>0</strong>
              <span class="loyco-tier-bonus" data-tier-bonus style="display: none;">
                + <strong data-bonus-points>0</strong> bonus
              </span>
              <span class="loyco-points-unit" data-points-name>points</span>
            </span>
          </div>

          <div class="loyco-current-balance">
            <span class="loyco-balance-label">Current balance:</span>
            <span class="loyco-balance-value">
              <strong data-current-points>0</strong>
              <span data-points-name>points</span>
            </span>
          </div>

          <div class="loyco-future-balance">
            <span class="loyco-future-label">After this order:</span>
            <span class="loyco-future-value">
              <strong data-future-points>0</strong>
              <span data-points-name>points</span>
            </span>
          </div>
        </div>

        <div class="loyco-cart-tier-progress" data-tier-section style="display: none;">
          <div class="loyco-tier-current">
            <span class="loyco-tier-badge" data-tier-badge>
              <span data-tier-icon></span>
              <span data-tier-name></span>
            </span>
          </div>

          <div class="loyco-tier-upgrade" data-tier-upgrade style="display: none;">
            <div class="loyco-upgrade-notice">
              🎉 This order will upgrade you to <strong data-next-tier-name></strong>!
            </div>
          </div>

          <div class="loyco-tier-progress-bar" data-tier-progress style="display: none;">
            <div class="loyco-progress-text">
              <span data-points-to-next>0</span> more points to reach <span data-next-tier-name></span>
            </div>
            <div class="loyco-progress-bar">
              <div class="loyco-progress-fill" data-progress-fill></div>
            </div>
          </div>
        </div>

        <div class="loyco-cart-rewards" data-available-rewards style="display: none;">
          <h5>🏆 You can redeem:</h5>
          <div class="loyco-rewards-list" data-rewards-list></div>
          <button class="loyco-view-rewards-btn" onclick="openRewardsModal()">
            View All Available Rewards
          </button>
        </div>

        <div class="loyco-referral-prompt" data-referral-prompt style="display: none;">
          <div class="loyco-referral-content">
            <h5>📢 Invite Friends</h5>
            <p>Share your referral code and earn bonus points!</p>
            <div class="loyco-referral-code">
              <span>Your code: <strong data-referral-code></strong></span>
              <button class="loyco-copy-code" onclick="copyReferralCode()">Copy</button>
            </div>
          </div>
        </div>
      </div>

      <div class="loyco-cart-error" style="display: none;">
        <p>Unable to calculate rewards. Points will still be awarded after purchase.</p>
      </div>
    </div>
  {% endif %}
</div>

<!-- Quick Rewards Modal -->
<div class="loyco-modal" id="loyco-cart-rewards-modal" style="display: none;">
  <div class="loyco-modal-backdrop" onclick="closeRewardsModal()"></div>
  <div class="loyco-modal-content">
    <div class="loyco-modal-header">
      <h3>Available Rewards</h3>
      <button class="loyco-modal-close" onclick="closeRewardsModal()">&times;</button>
    </div>
    <div class="loyco-modal-body">
      <div class="loyco-modal-rewards-list"></div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const cartSummary = document.querySelector('.loyco-cart-summary');
    if (!cartSummary) return;

    const customerId = cartSummary.dataset.customerId;
    const shop = cartSummary.dataset.shop;

    if (!customerId || !shop) return;

    initCartSummary(cartSummary, customerId, shop);

    // Listen for cart updates
    document.addEventListener('cart:updated', function() {
      loadCartSummary(cartSummary, customerId, shop);
    });

    // Shopify theme events
    if (window.Shopify && window.Shopify.theme) {
      document.addEventListener('cart:changed', function() {
        loadCartSummary(cartSummary, customerId, shop);
      });
    }
  });

  function initCartSummary(summary, customerId, shop) {
    loadCartSummary(summary, customerId, shop);
  }

  function loadCartSummary(summary, customerId, shop) {
    const loadingEl = summary.querySelector('.loyco-cart-loading');
    const contentEl = summary.querySelector('.loyco-cart-content');
    const errorEl = summary.querySelector('.loyco-cart-error');

    loadingEl.style.display = 'flex';
    contentEl.style.display = 'none';
    errorEl.style.display = 'none';

    // Get cart total and customer data simultaneously
    Promise.all([
      getCartTotal(),
      getCustomerData(customerId, shop),
      getProgramData(shop)
    ])
    .then(([cartTotal, customerData, programData]) => {
      if (customerData.enrolled && programData.active) {
        calculateCartRewards(summary, cartTotal, customerData, programData);
        contentEl.style.display = 'block';
      } else {
        errorEl.style.display = 'block';
      }
      loadingEl.style.display = 'none';
    })
    .catch(error => {
      console.error('Failed to load cart summary:', error);
      loadingEl.style.display = 'none';
      errorEl.style.display = 'block';
    });
  }

  function getCartTotal() {
    // Try multiple methods to get cart total
    if (window.cart && window.cart.total_price) {
      return Promise.resolve(window.cart.total_price);
    }

    if (window.Shopify && window.Shopify.cart) {
      return Promise.resolve(window.Shopify.cart.total_price);
    }

    // Fallback: fetch cart data
    return fetch('/cart.js')
      .then(response => response.json())
      .then(cart => cart.total_price)
      .catch(() => {
        // Last resort: parse from page
        const totalElement = document.querySelector('[data-cart-total], .cart__total .money, .cart-total .money');
        if (totalElement) {
          const totalText = totalElement.textContent.replace(/[^\d.,]/g, '');
          return Math.round(parseFloat(totalText) * 100); // Convert to cents
        }
        return 0;
      });
  }

  function getCustomerData(customerId, shop) {
    const proxyUrl = `/apps/loyco-rewards/api/customer/${customerId}/status?shop=${shop}&timestamp=${Date.now()}&signature=temp`;
    return fetch(proxyUrl).then(response => response.json());
  }

  function getProgramData(shop) {
    const proxyUrl = `/apps/loyco-rewards/api/program?shop=${shop}&timestamp=${Date.now()}&signature=temp`;
    return fetch(proxyUrl).then(response => response.json());
  }

  function calculateCartRewards(summary, cartTotal, customerData, programData) {
    // Calculate base points from cart total
    const basePoints = Math.floor((cartTotal / 100) * programData.pointsPerDollar);

    // Calculate tier bonus
    const tierMultiplier = customerData.tier?.pointsMultiplier || 1;
    const bonusPoints = Math.floor(basePoints * (tierMultiplier - 1));
    const totalPoints = basePoints + bonusPoints;

    // Update display
    updateCartEarnings(summary, basePoints, bonusPoints, totalPoints, customerData, programData);
    updateTierProgress(summary, customerData, totalPoints);
    updateAvailableRewards(summary, customerData, totalPoints);
    updateReferralSection(summary, customerData, programData);
  }

  function updateCartEarnings(summary, basePoints, bonusPoints, totalPoints, customerData, programData) {
    const basePointsEl = summary.querySelector('[data-base-points]');
    const tierBonusEl = summary.querySelector('[data-tier-bonus]');
    const bonusPointsEl = summary.querySelector('[data-bonus-points]');
    const currentPointsEls = summary.querySelectorAll('[data-current-points]');
    const futurePointsEl = summary.querySelector('[data-future-points]');
    const pointsNameEls = summary.querySelectorAll('[data-points-name]');

    if (basePointsEl) basePointsEl.textContent = basePoints.toLocaleString();

    if (bonusPoints > 0 && tierBonusEl && bonusPointsEl) {
      tierBonusEl.style.display = 'inline';
      bonusPointsEl.textContent = bonusPoints.toLocaleString();
    }

    currentPointsEls.forEach(el => {
      el.textContent = customerData.customer.pointsBalance.toLocaleString();
    });

    if (futurePointsEl) {
      const futureBalance = customerData.customer.pointsBalance + totalPoints;
      futurePointsEl.textContent = futureBalance.toLocaleString();
    }

    pointsNameEls.forEach(el => {
      el.textContent = programData.pointsName || 'points';
    });
  }

  function updateTierProgress(summary, customerData, earnedPoints) {
    const tierSection = summary.querySelector('[data-tier-section]');
    if (!tierSection || !customerData.tier) return;

    tierSection.style.display = 'block';

    // Update current tier
    const tierBadge = summary.querySelector('[data-tier-badge]');
    const tierName = summary.querySelector('[data-tier-name]');
    const tierIcon = summary.querySelector('[data-tier-icon]');

    if (tierName) tierName.textContent = customerData.tier.name;
    if (tierIcon) tierIcon.textContent = customerData.tier.icon || '⭐';
    if (tierBadge) {
      tierBadge.style.setProperty('--tier-color', customerData.tier.color);
    }

    // Check for tier upgrade
    if (customerData.nextTier) {
      const futureLifetimePoints = customerData.customer.lifetimePoints + earnedPoints;
      const willUpgrade = futureLifetimePoints >= customerData.nextTier.requiredPoints;

      if (willUpgrade) {
        const upgradeEl = summary.querySelector('[data-tier-upgrade]');
        const nextTierNameEls = summary.querySelectorAll('[data-next-tier-name]');

        if (upgradeEl) upgradeEl.style.display = 'block';
        nextTierNameEls.forEach(el => {
          el.textContent = customerData.nextTier.name;
        });
      } else {
        // Show progress to next tier
        const progressEl = summary.querySelector('[data-tier-progress]');
        const pointsToNext = summary.querySelector('[data-points-to-next]');
        const progressFill = summary.querySelector('[data-progress-fill]');
        const nextTierNameEl = summary.querySelector('[data-next-tier-name]');

        if (progressEl) progressEl.style.display = 'block';
        if (nextTierNameEl) nextTierNameEl.textContent = customerData.nextTier.name;

        const remainingPoints = customerData.nextTier.requiredPoints - futureLifetimePoints;
        if (pointsToNext) pointsToNext.textContent = Math.max(0, remainingPoints).toLocaleString();

        if (progressFill) {
          const progressPercent = (futureLifetimePoints / customerData.nextTier.requiredPoints) * 100;
          progressFill.style.width = Math.min(progressPercent, 100) + '%';
        }
      }
    }
  }

  function updateAvailableRewards(summary, customerData, earnedPoints) {
    if (!customerData.availableRewards || customerData.availableRewards.length === 0) return;

    const rewardsSection = summary.querySelector('[data-available-rewards]');
    const rewardsList = summary.querySelector('[data-rewards-list]');

    if (!rewardsSection || !rewardsList) return;

    const futureBalance = customerData.customer.pointsBalance + earnedPoints;
    const affordableRewards = customerData.availableRewards.filter(
      reward => reward.pointsCost <= futureBalance
    ).slice(0, 3);

    if (affordableRewards.length > 0) {
      rewardsList.innerHTML = affordableRewards.map(reward => `
        <div class="loyco-cart-reward-item">
          <span class="loyco-reward-name">${reward.name}</span>
          <span class="loyco-reward-cost">${reward.pointsCost.toLocaleString()} pts</span>
        </div>
      `).join('');

      rewardsSection.style.display = 'block';
    }
  }

  function updateReferralSection(summary, customerData, programData) {
    if (!programData.referralsEnabled) return;

    const referralSection = summary.querySelector('[data-referral-prompt]');
    const referralCodeEl = summary.querySelector('[data-referral-code]');

    if (referralSection && referralCodeEl && customerData.customer.referralCode) {
      referralCodeEl.textContent = customerData.customer.referralCode;
      referralSection.style.display = 'block';
    }
  }

  function openRewardsModal() {
    const modal = document.getElementById('loyco-cart-rewards-modal');
    if (modal) {
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    }
  }

  function closeRewardsModal() {
    const modal = document.getElementById('loyco-cart-rewards-modal');
    if (modal) {
      modal.style.display = 'none';
      document.body.style.overflow = '';
    }
  }

  function copyReferralCode() {
    const codeEl = document.querySelector('[data-referral-code]');
    const copyBtn = document.querySelector('.loyco-copy-code');

    if (codeEl && copyBtn) {
      const code = codeEl.textContent;

      if (navigator.clipboard) {
        navigator.clipboard.writeText(code).then(() => {
          const originalText = copyBtn.textContent;
          copyBtn.textContent = 'Copied!';
          setTimeout(() => {
            copyBtn.textContent = originalText;
          }, 2000);
        });
      } else {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = code;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);

        const originalText = copyBtn.textContent;
        copyBtn.textContent = 'Copied!';
        setTimeout(() => {
          copyBtn.textContent = originalText;
        }, 2000);
      }
    }
  }
</script>

<style>
  .loyco-cart-summary {
    margin: 20px 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .loyco-guest-card {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 20px;
    background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
    border-radius: 12px;
    border: 1px solid #d1d5db;
  }

  .loyco-guest-icon {
    font-size: 2.5rem;
    flex-shrink: 0;
  }

  .loyco-guest-content h4 {
    margin: 0 0 8px 0;
    font-size: 1.125rem;
    font-weight: 600;
    color: #1f2937;
  }

  .loyco-guest-content p {
    margin: 0 0 12px 0;
    color: #6b7280;
    font-size: 0.875rem;
  }

  .loyco-guest-cta {
    display: inline-block;
    padding: 10px 16px;
    background: #6366f1;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    font-size: 0.875rem;
    transition: background-color 0.2s;
  }

  .loyco-guest-cta:hover {
    background: #5855eb;
  }

  .loyco-cart-customer {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    overflow: hidden;
  }

  .loyco-cart-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    padding: 40px 20px;
  }

  .loyco-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid #e5e7eb;
    border-top: 2px solid #6366f1;
    border-radius: 50%;
    animation: loyco-spin 1s linear infinite;
  }

  .loyco-cart-header {
    padding: 20px 20px 0 20px;
    border-bottom: 1px solid #f3f4f6;
  }

  .loyco-cart-header h4 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: #1f2937;
  }

  .loyco-cart-earnings {
    padding: 20px;
    border-bottom: 1px solid #f3f4f6;
  }

  .loyco-earnings-row,
  .loyco-current-balance,
  .loyco-future-balance {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
    font-size: 0.875rem;
  }

  .loyco-earnings-row {
    margin-bottom: 12px;
    font-size: 1rem;
  }

  .loyco-future-balance {
    margin-bottom: 0;
    padding-top: 8px;
    border-top: 1px solid #f3f4f6;
    font-weight: 500;
  }

  .loyco-earnings-value {
    color: #059669;
    font-weight: 600;
  }

  .loyco-tier-bonus {
    color: #7c3aed;
    font-weight: 500;
  }

  .loyco-cart-tier-progress {
    padding: 20px;
    border-bottom: 1px solid #f3f4f6;
  }

  .loyco-tier-current {
    margin-bottom: 12px;
  }

  .loyco-tier-badge {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    background: var(--tier-color, #f3f4f6);
    color: #1f2937;
    padding: 6px 12px;
    border-radius: 16px;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .loyco-upgrade-notice {
    background: linear-gradient(135deg, #fef3c7 0%, #fed7aa 100%);
    border: 1px solid #f59e0b;
    padding: 12px;
    border-radius: 8px;
    font-size: 0.875rem;
    text-align: center;
  }

  .loyco-tier-progress-bar {
    margin-top: 12px;
  }

  .loyco-progress-text {
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 6px;
  }

  .loyco-progress-bar {
    height: 6px;
    background: #f3f4f6;
    border-radius: 3px;
    overflow: hidden;
  }

  .loyco-progress-fill {
    height: 100%;
    background: #6366f1;
    transition: width 0.3s ease;
  }

  .loyco-cart-rewards {
    padding: 20px;
    border-bottom: 1px solid #f3f4f6;
  }

  .loyco-cart-rewards h5 {
    margin: 0 0 12px 0;
    font-size: 1rem;
    font-weight: 600;
    color: #1f2937;
  }

  .loyco-cart-reward-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid #f9fafb;
    font-size: 0.875rem;
  }

  .loyco-cart-reward-item:last-child {
    border-bottom: none;
  }

  .loyco-reward-cost {
    color: #6366f1;
    font-weight: 500;
  }

  .loyco-view-rewards-btn {
    width: 100%;
    padding: 10px 16px;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    color: #374151;
    cursor: pointer;
    font-size: 0.875rem;
    font-weight: 500;
    margin-top: 12px;
    transition: background-color 0.2s;
  }

  .loyco-view-rewards-btn:hover {
    background: #f3f4f6;
  }

  .loyco-referral-prompt {
    padding: 20px;
  }

  .loyco-referral-content h5 {
    margin: 0 0 8px 0;
    font-size: 1rem;
    font-weight: 600;
    color: #1f2937;
  }

  .loyco-referral-content p {
    margin: 0 0 12px 0;
    font-size: 0.875rem;
    color: #6b7280;
  }

  .loyco-referral-code {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    font-size: 0.875rem;
  }

  .loyco-referral-code span {
    flex: 1;
  }

  .loyco-copy-code {
    background: #6366f1;
    color: white;
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.75rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .loyco-copy-code:hover {
    background: #5855eb;
  }

  .loyco-cart-error {
    padding: 20px;
    text-align: center;
    color: #dc2626;
    font-size: 0.875rem;
  }

  /* Modal styles */
  .loyco-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .loyco-modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
  }

  .loyco-modal-content {
    position: relative;
    background: white;
    border-radius: 12px;
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    overflow: hidden;
  }

  .loyco-modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px;
    border-bottom: 1px solid #e5e7eb;
  }

  .loyco-modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 4px;
  }

  .loyco-modal-body {
    padding: 20px;
    max-height: 60vh;
    overflow-y: auto;
  }

  @keyframes loyco-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .loyco-guest-card {
      flex-direction: column;
      text-align: center;
    }

    .loyco-guest-icon {
      font-size: 2rem;
    }

    .loyco-earnings-row,
    .loyco-current-balance,
    .loyco-future-balance {
      flex-direction: column;
      align-items: flex-start;
      gap: 4px;
    }
  }
</style>